{
  "name": "vscode-hack",
  "version": "2.12.0",
  "publisher": "pranayagarwal",
  "engines": {
    "vscode": "^1.61.0"
  },
  "license": "MIT",
  "displayName": "Hack",
  "description": "Hack language & HHVM debugger support for Visual Studio Code",
  "icon": "images/logo.png",
  "categories": [
    "Programming Languages",
    "Debuggers",
    "Linters",
    "Snippets",
    "Formatters",
    "Other"
  ],
  "keywords": [
    "hack",
    "hacklang",
    "hhvm",
    "php"
  ],
  "galleryBanner": {
    "color": "#5d5d5d",
    "theme": "dark"
  },
  "author": {
    "name": "Pranay Agarwal"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/slackhq/vscode-hack.git"
  },
  "bugs": {
    "url": "https://github.com/slackhq/vscode-hack/issues"
  },
  "main": "./out/main",
  "contributes": {
    "languages": [
      {
        "id": "hack",
        "aliases": [
          "Hack",
          "hacklang"
        ],
        "configuration": "./hack.configuration.json",
        "extensions": [
          ".php",
          ".hh",
          ".hack"
        ],
        "firstLine": "^<\\?hh\\b.*|#!.*hhvm.*$"
      },
      {
        "id": "ini",
        "aliases": [
          "Hack Configuration",
          "hack",
          "hacklang"
        ],
        "filenames": [
          ".hhconfig"
        ]
      }
    ],
    "grammars": [
      {
        "language": "hack",
        "scopeName": "source.hack",
        "path": "./syntaxes/hack.json"
      },
      {
        "scopeName": "markdown.hack.codeblock",
        "path": "./syntaxes/codeblock.json",
        "injectTo": [
          "text.html.markdown"
        ],
        "embeddedLanguages": {
          "meta.embedded.block.hack": "hack"
        }
      }
    ],
    "snippets": [
      {
        "language": "hack",
        "path": "./snippets/hack.json"
      }
    ],
    "breakpoints": [
      {
        "language": "hack"
      }
    ],
    "debuggers": [
      {
        "type": "hhvm",
        "label": "HHVM",
        "program": "./out/debugger",
        "runtime": "node",
        "languages": [
          "hack"
        ],
        "configurationAttributes": {
          "attach": {
            "properties": {
              "host": {
                "type": "string",
                "description": "Host name/IP address of HHVM server (default: localhost)",
                "default": "localhost"
              },
              "port": {
                "type": "number",
                "description": "Debug port to attach to (default: 8999)",
                "default": 8999
              },
              "socket": {
                "type": "string",
                "description": "Path to the Unix domain socket to attach to"
              },
              "remoteSiteRoot": {
                "type": "string",
                "description": "Absolute path to workspace root on the remote server, to map to local workspace",
                "default": "${workspaceFolder}"
              },
              "localWorkspaceRoot": {
                "type": "string",
                "description": "Absolute path to local workspace root, to map to remote server",
                "default": "${workspaceFolder}"
              },
              "launchUrl": {
                "type": "string",
                "description": "Make an HTTP GET request to this URL once the debugger is attached, and automatically detach when the request is complete"
              }
            }
          },
          "launch": {
            "properties": {
              "hhvmPath": {
                "type": "string",
                "description": "Absolute path to HHVM executable for launching scripts (default: hhvm)",
                "default": "hhvm"
              },
              "hhvmArgs": {
                "type": "array",
                "description": "Extra arguments to pass to the HHVM command when launching a script, if any"
              },
              "script": {
                "type": "string",
                "description": "The PHP/Hack script to launch",
                "default": "${file}"
              },
              "cwd": {
                "type": "string",
                "description": "Working directory for the launched HHVM process",
                "default": "${workspaceFolder}"
              }
            }
          }
        },
        "configurationSnippets": [
          {
            "label": "HHVM: Attach to Server",
            "description": "Attach to an HHVM server",
            "body": {
              "name": "HHVM: Attach to Server",
              "type": "hhvm",
              "request": "attach",
              "host": "localhost",
              "port": 8999,
              "remoteSiteRoot": "^\"\\${workspaceFolder}\"",
              "localWorkspaceRoot": "^\"\\${workspaceFolder}\""
            }
          },
          {
            "label": "HHVM: Run Script",
            "description": "Run the current script",
            "body": {
              "name": "HHVM: Run Script",
              "type": "hhvm",
              "request": "launch",
              "script": "^\"\\${file}\""
            }
          }
        ]
      }
    ],
    "configuration": {
      "type": "object",
      "title": "Hack configuration",
      "properties": {
        "hack.clientPath": {
          "type": "string",
          "default": "hh_client",
          "description": "Absolute path to the hh_client executable. This can be left empty if hh_client is already in your environment $PATH."
        },
        "hack.workspaceRootPath": {
          "type": "string",
          "default": null,
          "description": "Absolute path to the workspace root directory. This will be the VS Code workspace root by default, but can be changed if the project is in a subdirectory or mounted in a Docker container.",
          "deprecationMessage": "Use hack.remote.workspacePath instead"
        },
        "hack.enableCoverageCheck": {
          "type": "boolean",
          "default": false,
          "description": "Enable calculation of Hack type coverage percentage for every file and display in status bar."
        },
        "hack.useLanguageServer": {
          "type": "boolean",
          "default": true,
          "description": "Start hh_client in Language Server mode. Only works for HHVM version 3.23 and above."
        },
        "hack.useHhast": {
          "type": "boolean",
          "default": true,
          "description": "Enable linting (needs HHAST library set up and configured in project)",
          "markdownDescription": "Enable linting (needs [HHAST](https://github.com/hhvm/hhast) library set up and configured in project)"
        },
        "hack.hhastPath": {
          "type": "string",
          "default": "vendor/bin/hhast-lint",
          "description": "Use an alternate hhast-lint path. Can be abolute or relative to workspace root.",
          "markdownDescription": "Use an alternate `hhast-lint` path. Can be abolute or relative to workspace root."
        },
        "hack.hhastArgs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "Optional list of arguments passed to hhast-lint executable"
        },
        "hack.hhastLintMode": {
          "type": "string",
          "enum": [
            "whole-project",
            "open-files"
          ],
          "enumDescriptions": [
            "Lint the entire project and show all errors",
            "Only lint the currently open files"
          ],
          "default": null,
          "description": "Whether to lint the entire project or just the open files"
        },
        "hack.rememberedWorkspaces": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "enum": [
              "trusted",
              "untrusted"
            ]
          },
          "default": {},
          "description": "Workspaces where whether or not to run custom Hack executables (e.g. hhast-lint) has been remembered"
        },
        "hack.remote.enabled": {
          "type": "boolean",
          "default": false,
          "description": "Run the Hack language tools on an external host"
        },
        "hack.remote.type": {
          "type": "string",
          "enum": [
            "ssh",
            "docker"
          ],
          "enumDescriptions": [
            "Run typechecker on a remote server via SSH",
            "Run typechecker in a Docker container"
          ],
          "description": "The remote connection method"
        },
        "hack.remote.workspacePath": {
          "type": "string",
          "description": "Absolute location of workspace root in the remote file system"
        },
        "hack.remote.ssh.host": {
          "type": "string",
          "description": "Address for the remote development server to connect to (in the format `[user@]hostname`)"
        },
        "hack.remote.ssh.flags": {
          "type": "array",
          "description": "Additional command line options to pass when establishing the SSH connection"
        },
        "hack.remote.docker.containerName": {
          "type": "string",
          "description": "Name of the local Docker container to run the language tools in"
        },
        "hack.trace.server": {
          "type": "string",
          "scope": "window",
          "enum": [
            "off",
            "messages",
            "verbose"
          ],
          "default": "off",
          "description": "Traces the communication between VS Code and the Hack & HHAST language servers"
        }
      }
    },
    "commands": [
      {
        "command": "hack.toggleCoverageHighlight",
        "title": "Hack: Toggle Coverage Highlight"
      }
    ]
  },
  "activationEvents": [
    "workspaceContains:.hhconfig",
    "onDebug"
  ],
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "postinstall": "node ./build/notice-file-generate.js",
    "pretest": "npm run compile",
    "test": "node ./out/test/runTest.js",
    "deploy": "vsce publish"
  },
  "dependencies": {
    "vscode-debugadapter": "^1.35.0",
    "vscode-debugprotocol": "^1.35.0",
    "vscode-languageclient": "^5.2.1"
  },
  "devDependencies": {
    "@types/glob": "^7.1.4",
    "@types/mocha": "^9.0.0",
    "@types/node": "14.x",
    "@types/vscode": "^1.61.0",
    "@typescript-eslint/eslint-plugin": "^4.31.1",
    "@typescript-eslint/parser": "^4.31.1",
    "@vscode/test-electron": "^1.6.2",
    "eslint": "^7.32.0",
    "glob": "^7.1.7",
    "license-checker": "^25.0.1",
    "mocha": "^9.1.1",
    "typescript": "^4.4.3"
  }
}
